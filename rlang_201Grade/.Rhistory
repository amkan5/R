df_seat[,2]
df_seat[,1]
pie(df_seat[,1],df_seat[,2],col=rainbow(20),radius =2.5)
pie(df_seat$SEATS,df_seat$STADIUM,col=rainbow(20),radius =2.5
,density = 100,angle = 45)
input <- mtcars[,c('wt','mpg')]
print(input)
plot(x = input$wt,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
df_month_count <- dbGetQuery(conn, "SELECT
(SELECT COUNT(*) "1"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201201%') "1",
(SELECT COUNT(*) "2"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201202%') "2",
(SELECT COUNT(*) "3"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201203%') "3",
(SELECT COUNT(*) "4"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201204%') "4",
(SELECT COUNT(*) "5"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201205%') "5",
(SELECT COUNT(*) "6"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201206%') "6",
(SELECT COUNT(*) "7"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201207%') "7",
(SELECT COUNT(*) "8"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201208%') "8",
(SELECT COUNT(*) "9"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201209%') "9",
(SELECT COUNT(*) "10"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201210%') "10",
(SELECT COUNT(*) "11"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201211%') "11",
(SELECT COUNT(*) "12"
FROM SCHEDULE
WHERE SCHE_DATE LIKE '201212%') "12"
FROM DUAL")
df_month_count <- dbGetQuery(conn, "select
(select count(*) from schedule sc where sc.sche_date like '201201%') JAN,
(select count(*) from schedule sc where sc.sche_date like '201202%') FEB,
(select count(*) from schedule sc where sc.sche_date like '201203%') MAR,
(select count(*) from schedule sc where sc.sche_date like '201204%') APL,
(select count(*) from schedule sc where sc.sche_date like '201205%') MAY,
(select count(*) from schedule sc where sc.sche_date like '201206%') JUN,
(select count(*) from schedule sc where sc.sche_date like '201207%') JUL,
(select count(*) from schedule sc where sc.sche_date like '201208%') AUG,
(select count(*) from schedule sc where sc.sche_date like '201209%') SET,
(select count(*) from schedule sc where sc.sche_date like '201210%') OCT,
(select count(*) from schedule sc where sc.sche_date like '201211%') NOV,
(select count(*) from schedule sc where sc.sche_date like '201212%') DEC
from dual")
df_month_count <- dbGetQuery(conn, "select
(select count(*) from schedule sc where sc.sche_date like '201201%') JAN,
(select count(*) from schedule sc where sc.sche_date like '201202%') FEB,
(select count(*) from schedule sc where sc.sche_date like '201203%') MAR,
(select count(*) from schedule sc where sc.sche_date like '201204%') APL,
(select count(*) from schedule sc where sc.sche_date like '201205%') MAY,
(select count(*) from schedule sc where sc.sche_date like '201206%') JUN,
(select count(*) from schedule sc where sc.sche_date like '201207%') JUL,
(select count(*) from schedule sc where sc.sche_date like '201208%') AUG,
(select count(*) from schedule sc where sc.sche_date like '201209%')'SET',
(select count(*) from schedule sc where sc.sche_date like '201210%') OCT,
(select count(*) from schedule sc where sc.sche_date like '201211%') NOV,
(select count(*) from schedule sc where sc.sche_date like '201212%') 'DEC'
from dual")
df_month_count <- dbGetQuery(conn, "select
(select count(*) from schedule sc where sc.sche_date like '201201%') JAN,
(select count(*) from schedule sc where sc.sche_date like '201202%') FEB,
(select count(*) from schedule sc where sc.sche_date like '201203%') MAR,
(select count(*) from schedule sc where sc.sche_date like '201204%') APL,
(select count(*) from schedule sc where sc.sche_date like '201205%') MAY,
(select count(*) from schedule sc where sc.sche_date like '201206%') JUN,
(select count(*) from schedule sc where sc.sche_date like '201207%') JUL,
(select count(*) from schedule sc where sc.sche_date like '201208%') AUG,
(select count(*) from schedule sc where sc.sche_date like '201209%') STM,
(select count(*) from schedule sc where sc.sche_date like '201210%') OCT,
(select count(*) from schedule sc where sc.sche_date like '201211%') NOV,
(select count(*) from schedule sc where sc.sche_date like '201212%') DCM
from dual")
df_month_count
input <- mtcars[,c('wt','mpg')]
print(input)
plot(x = input$wt,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
# SQL30 바차트 : 구단승리순으로 순위매기기
query = "SELECT A.WINNER,
COUNT(A.WINNER) WIN_COUNT
FROM(SELECT
K.SCHE_DATE 경기날짜,
CASE
WHEN K.HOME_SCORE > K.AWAY_SCORE THEN HT.TEAM_NAME
WHEN K.AWAY_SCORE > K.HOME_SCORE THEN AT.TEAM_NAME
ELSE '무승부'
END WINNER
FROM SCHEDULE K
JOIN TEAM HT
ON K.HOMETEAM_ID LIKE HT.TEAM_ID
JOIN TEAM AT
ON K.AWAYTEAM_ID LIKE AT.TEAM_ID
WHERE
K.GUBUN LIKE 'Y'
AND K.SCHE_DATE LIKE '2012%'
)A
WHERE A.WINNER NOT LIKE '무승부'
GROUP BY A.WINNER
ORDER BY WIN_COUNT DESC"
rs <- dbGetQuery(conn, query)
barplot(rs[,2],names.arg=rs[,1], main = "승리수")
barplot(df_win_count$WIN_COUNT, names.arg = df_win_count$WINNER)
height <- c(132,151,162,139,166,147,122)
weight <- c(48,49,66,53,67,52,40)
gender <- c("male","male","female","female","male","female","male")
input_data <- data.frame(height,weight,gender)
print(input_data)
print(is.factor(input_data$gender))
# Test if the gender column is a factor.
print(is.factor(input_data))
# Test if the gender column is a factor.
print(is.factor(input_data$gender))
# Test if the gender column is a factor.
print(is.factor(input_data$height))
print(input_data$gender)
df_seat <- dbGetQuery(conn,
"SELECT
ROWNUM NO,
A.*
FROM (
SELECT
S.STADIUM_NAME STADIUM,
S.SEAT_COUNT SEATS
FROM STADIUM S
ORDER BY
S.SEAT_COUNT DESC
) A"
)
df_seat
df_seat[,2]
df_seat[,1]
pie(df_seat[,1],df_seat[,2],col=rainbow(20),radius =2.5)
pie(df_seat$SEATS,df_seat$STADIUM,col=rainbow(20),radius =2.5
,density = 100,angle = 45)
input <- mtcars[,c('month','number')]
print(input)
plot(x = df_month_count$JAN ,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
df_month_count
plot(factor(gender))
install.packages("ggplot2")
?csv
read.csv(file = "C:\Users\1027\JavaWorkspace\RSpace\2013년_전년대비_시간대별_교통사고_사망자_현황.csv", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "", ...)
read.csv(file = "C:\\Users\\1027\\JavaWorkspace\\RSpace\\2013년_전년대비_시간대별_교통사고_사망자_현황.csv", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "", ...)
read.csv(file = "C:\\Users\\1027\\JavaWorkspace\\RSpace\\2013년_전년대비_시간대별_교통사고_사망자_현황.csv", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
x <- c("2","2","3","1","4","4","4","4")
x
qplot(x)
library(ggplot2) #import같은 느낌
x <- c("2","2","3","1","4","4","4","4")
x
qplot(x)
rm(x)
head(mpg)
# mpg 데이터를 데이터프레임으로 만든다.
mpg <- as.data.frame(ggplot2::mpg) #1 데이터프레임으로 출력
head(mpg) #상위 5개만 보는거
tail(mpg) #맨밑 5개 보는거
dim(mpg)
str(mpg)
summary(mpg)
# 통합 여비 변수 생성
mpg$total <- (mpg$city -)
# 통합 여비 변수 생성
mpg$total <- (mpg$city =mpg$hau) / 2
# 통합 여비 변수 생성
mpg$total <- (mpg$city +mpg$hau) / 2
# 통합 여비 변수 생성
mpg$total <- (mpg$city +mpg$hau) / 2
summary(mpg)
str(mpg) # 11개의 변수 타입,
# 통합 여비 변수 생성
mpg$total <- (mpg$city +mpg$hau) / 2
# 통합 여비 변수 생성
mpg$total <- (mpg$city +mpg$hwy) / 2
#요약
summary(mpg$total)
hist(mpg$total)
#요약
summary(mpg$total)
hist(mpg$total)
#통합연비변수평균
mean(mpg$total)
#통합연비변수평균
mean(mpg$total)
mpg$total <- (mpg$city +mpg$hwy) / 2
head(mpg)
mean(mpg$total)
# 통합 여비 변수 생성
mpg$total <- (mpg$city +mpg$hwy) / 2
head(mpg)
# 통합 여비 변수 생성
mpg$total <- (mpg$city +mpg$hwy) / 2
# 통합 여비 변수 생성
mpg$total <- (mpg$city +mpg$hwy) / 2
# 통합 여비 변수 생성
mpg$total <- (mpg$cty +mpg$hwy) / 2
head(mpg)
#통합연비변수평균
mean(mpg$total)
#요약
summary(mpg$total)
hist(mpg$total)
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg, 20)
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg, 20)
#합격판정을 받은 자동차 수 살펴보자
table(mpg$test)
hist(mpg$total)
qplot(data = mpg, x= hmy)
summary(mpg$test)
hist(mpg$test)
#합격판정을 받은 자동차 수 살펴보자
table(mpg$test)
hist(mpg$test)
#요약
summary(mpg$total)
hist(mpg$total)
#합격판정을 받은 자동차 수 살펴보자
table(mpg$test)
qplot(mpg$test)
mpg$total <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C")
)
head(mpg,20)
table(mpg$grade)
qplot(mpg$grade)
#중첩조건문
#total 30 이상이면 A
#TOTAL 20 ~ 29 이면 B
#total 20 미만이면 c
mpg$total <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C")
)
head(mpg,20)
table(mpg$grade)
qplot(mpg$grade)
table(mpg$grade)
table(mpg$grade)
head(mpg,20)
qplot(mpg$grade)
#중첩조건문
#total 30 이상이면 A
#TOTAL 20 ~ 29 이면 B
#total 20 미만이면 c
mpg$grade <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C")
)
head(mpg,20)
table(mpg$grade)
qplot(mpg$grade)
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B",
ifelse(mpg$total >= 10,"C" ,"D")
)
mpg$grade <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B",
ifelse(mpg$total >= 10,"C" ,"D")
)
mpg$grade <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B",
ifelse(mpg$total >= 10,"C" ,"D")
))
mpg$grade <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B",
ifelse(mpg$total) >= 10, "C","D")
)
head(mpg,20)
table(mpg$grade)
qplot(mpg$grade)
table(mpg$grade)
# 변수명 변경
MPG <- RENAME(MPG,COMPANY <- MANUFECTURE)
mpg <- rename(mpg,company <- manufecture)
qplot(mpg$grade)
table(mpg$grade)
qplot(mpg$grade)
table(mpg$grade)
head(mpg,20)
# 통합 여비 변수 생성
mpg$total <- (mpg$cty +mpg$hwy) / 2
#중첩조건문
#total 30 이상이면 A
#TOTAL 20 ~ 29 이면 B
#total 20 미만이면 c
mpg$grade <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B",
ifelse(mpg$total) >= 10, "C","D")
)
mpg$grade <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B",
ifelse(mpg$total) >= 10, "C","D")
)
mpg$grade <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B",
ifelse(mpg$total) >= 10, "C","D")
)
mpg$grade <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B",
ifelse(mpg$total) >= 10, "C","D")
))
mpg$grade <- ifelse(
mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B",
ifelse(mpg$total >= 10, "C","D")
))
head(mpg,20)
table(mpg$grade)
qplot(mpg$grade)
midwest <- as.data.fram(ggplot2::midwest)
midwest <- as.data.fram(ggplot2::midwest)
midwest <- as.data.frame(ggplot2::midwest)
midwest
head(midwest)
midwest$total <- midwest$poptotal
midwest$asian <- midwest$popasian
#2. 백분율
midwest$r <- midwest$popasian/midwest$poptotal
midwest$r
total
hist(mpg$total)
his(midwest$r)
summary(midwest$r)
his(midwest$r)
table(midwest$r)
his(midwest$r, xlab="contry",ylab ="asain")
midwest$total <- midwest$poptotal
midwest$asian <- midwest$popasian
midwest$r <- midwest$popasian/midwest$poptotal
his(midwest$r, xlab="contry",ylab ="asain")
hist(midwest$r, xlab="contry",ylab ="asain")
hist(midwest$r)
summary(midwest$r)
table(mpg$grade)
summary(midwest$r)
table(midwest$large)
midwest$large <- ifelse(
midwest$r > mean(midwest$r), "large","small")
midwest$large <- ifelse(
midwest$r > mean(midwest$r), "large","small")
table(midwest$large)
hist(midwest$large)
hist(midwest$large)
table(midwest$large)
hist(midwest$large)
table(midwest$large)
hist(midwest$large)
gplot(midwest$large)
qplot(midwest$large)
table(midwest$large)
qplot(midwest$large)
hist(midwest$r)
qplot(midwest$large)
qplot(midwest$large)
#2. 히스토그램
hist(midwest$r)
#3. 빈도막대
table(midwest$large)
source('C:/Users/1027/JavaWorkspace/RSpace/rlang_201Grade/rlng_020_packages.R', encoding = 'UTF-8')
#3. 빈도표와 빈도막대
table(midwest$large)
qplot(midwest$large)
write.csv(df_midterm, file = "update_midwest.csv")
write.csv(midterm, file = "update_midwest.csv")
write.csv(midwest, file = "update_midwest.csv")
write.csv(df_midwest, file = "update_midwest.csv")
df_midwest <- as.data.frame(ggplot2::midwest)
head(midwest)
#1.
df_midwest$total <- df_midwest$poptotal
df_midwest$asian <- df_midwest$popasian
#2. 백분율
df_midwest$r <- df_midwest$popasian/df_midwest$poptotal
summary(df_midwest$r)
#2. 히스토그램
hist(df_midwest$r)
df_midwest$large <- ifelse(
df_midwest$r > mean(df_midwest$r), "large","small")
#3. 빈도표와 빈도막대
table(df_midwest$large)
qplot(df_midwest$large)
write.csv(df_midwest, file = "update_midwest.csv")
#2. 히스토그램
hist(df_midwest$r)
install.packages("dplyr")
library(dplyr)
library(dplyr)
path <- getwd() #working directory 의 약자 지금 작업하는 위치
path
setwd("csv_exam")
path
setwd("csv_exam")
setwd("csv_exam")
df_exam <- read.csv("csv_exam.csv")
df_exam <- read.csv("csv_exam.csv") #안에 문자면 factor로 바꿔야함
setwd("csv_exam") #working directory 변경
df_exam <- read.csv("csv_exam.csv") #안에 문자면 stringAsFactors = F 로 옆에 줘야함
setwd("csv_exam") #working directory 변경
df_exam <- read.csv("csv_exam.csv") #안에 문자면 stringAsFactors = F 로 옆에 줘야함
df_exam <- read.csv("csv_exam.csv")
#안에 문자면 stringAsFactors = F 로 옆에 줘야함
df_exam
#안에 문자면 stringAsFactors = F 로 옆에 줘야함
view(df_exam)
#안에 문자면 stringAsFactors = F 로 옆에 줘야함
view(df_exam)
View(df_exam)
df_exam <- rename (df_exam, userid=id)
df_exam$total <- df_exam$math+df_exam$english,df_exam$english
df_exam$total <- df_exam$math+df_exam$english+df_exam$english
#안에 문자면 stringAsFactors = F 로 옆에 줘야함
is.data.frame(df_exam)
df_exam <- rename (df_exam, userid=id)
df_exam$total <- df_exam$math+df_exam$english+df_exam$english
df_exam$avg <- df_exam$total/3
df_exam$grade <-
df_exam$grade <- switch(toString(exam$avg%/%10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")
df_exam$grade <- switch(toString(exam$avg%/%10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")
df_exam$grade <- switch(toString(exam$avg%/%10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")
df_exam$grade <- switch(toString(exam$avg%/%10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")
df_exam$grade <- switch(toString(df_exam$avg%/%10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")
(df_exam)
df_exam$grade <- switch(toString(round(df_exam$avg/10)),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")
(df_exam)
(df_exam)
df_exam$grade <- ifelse(
df_exam$avg >= 90, "A",
ifelse(df_exam$avg >=80, "B",
ifelse(df_exam$avg >=70, "C",
ifelse(df_exam$avg >=60, "D","E")
))
)
(df_exam)
